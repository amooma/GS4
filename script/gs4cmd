#! /usr/bin/env ruby

# print to standard error
def error(error_text)
	$stderr.puts error_text
end

def validation_error(errors)
	errors.each do |attribute_name, error_messages|
		error "\"#{attribute_name}\" #{error_messages}"
	end
end
# ensure specified columns exist in model
def check_columns(given_columns, object_columns)
	if (object_columns.class != Array)
		error "Object contains no columns"
		return false
	elsif (given_columns.class == Hash)
		given_columns = given_columns.keys
	elsif (given_columns.class != Array)
		error "No columns specified"
		return false
	end
	unknown_column = false
	given_columns.each do |column_name|
		if (! object_columns.include? column_name)
			error "Column \"#{column_name}\" not found"
			unknown_column = true
		end
	end
	if (unknown_column)
		return false
	end
	return true
end

# define allowed attributes
def allowed_attributes(class_name, class_attributes)
	attributes = {
		'User' => [
			'id','username','sn','gn','email','password'
		]
	}
	
	if (attributes.include? class_name)
		return attributes[class_name]
	end
	class_attributes.delete('created_at')
	class_attributes.delete('updated_at')
	return class_attributes
end

# define default column order for frequently used models
def default_column_order(object_name, columns)
	default_columns = {
		'User' => [
			'id','username','sn','gn','email',
		]
	}
	
	if (default_columns.include? object_name)
		return default_columns[object_name]
	end
	columns.delete('created_at')
	columns.delete('updated_at')
	return columns
end

APP_PATH = File.expand_path('../../config/application',  __FILE__)
require File.expand_path('../../config/boot',  __FILE__)
require APP_PATH

Rails.application.require_environment!

usage_banner = "Usage: #{$0} <command> <object-name> [options]"

# first parameter ist always the command
if (! ARGV[0]) 
	error "No command specified"
	error usage_banner
	exit 1
end
command_name = ARGV[0].downcase

# second parameter is the model name
begin
	model_class = ARGV[1].singularize.camelize.constantize
rescue
	error "Object not found"
	error usage_banner
	exit 1
end

# retrieve attribute names from model
attribute_names = allowed_attributes(model_class.name, model_class.new.attributes.keys)
column_order =  default_column_order(model_class.name, model_class.column_names)

options = Hash.new()
columns = Hash.new()
require 'optparse'
optionparser = OptionParser.new do |option|
	option.banner = usage_banner
	option.on('-c <column1,column2,column3>', Array, 'Specify column order') do |value|
		options[:column_order] = value
	end
	option.on('-s <separator>', String, 'Specify column separator','Default: "|"') do |value|
		options[:column_separator] = value
	end
	option.on( '-h', 'Display this help screen' ) do
		puts option
		exit
	end
	attribute_names.each do |option_name|
		option.on("--#{option_name} <value>", String, "Set \"#{option_name}\" attribute") do |value|
			columns[option_name] = value
		end
	end
end

# parse options
begin 
	optionparser.parse! ARGV
rescue OptionParser::InvalidOption => e
	error e
	error optionparser
	exit 1
rescue OptionParser::NeedlessArgument => e
	error e
	error optionparser
	exit 1
end

# ensure given options represent model attributes
if (options[:column_order])    
    if (! check_columns(options[:column_order], attribute_names))
		error "Some columns not found"
		exit 1
	else
		column_order = options[:column_order]
	end
end

if (columns.count > 0 && ! check_columns(columns, attribute_names))
	error "Some columns not found"
	exit 1
end

if (options[:column_separator])
	column_separator = options[:column_separator]
else
	column_separator = '|'
end

# process comand
case command_name
when 'list'
	begin
		if (columns.count > 0)
			entries = model_class.where(columns).all
		else
			entries = model_class.all
		end
	rescue => e
		error "Could not find objects"
		exit 1
	end
	if (entries)
		puts column_order.join(column_separator)
		entries.each do |entry|
			values = Array.new()
			column_order.each do |column|
				values << entry[column]
			end
			puts values.join(column_separator)
		end
	end
when 'add'
	new_object = model_class.create(columns)
	if (new_object)
		if (new_object.save)
			puts "Object \"#{model_class.name}\" added"
		else
			validation_error new_object.errors
			error "Object \"#{model_class.name}\" could not be added"
			exit 1
		end
	else
		error "Object \"#{model_class.name}\" not added"
		exit 1
	end
when 'update'
	if (columns['id'].blank?)
		error "No object ID specified"
		puts columns
		exit 1
	end
	object_found = model_class.where(:id  => columns['id']).first
	if (object_found)
		object_updated = object_found.update_attributes(columns)
	else
		error "No object ID \"#{columns.id}\" found"
	end
	
	if (object_updated)
		puts "Object \"#{model_class.name}\" updated"
	else
		error "Object \"#{model_class.name}\" not updated"
	end
else
	error "command \"#{command_name}\" not found"
	exit 1
end

#! /usr/bin/env ruby

begin

# print to standard error
def error( error_text )
	$stderr.puts( error_text.to_s )
end

def validation_error( errors )
	error "Validation errors:"
	errors.full_messages.each { |message|
		error "  - #{message}"
	}
end

# ensure specified columns exist in model
def check_columns( given_columns, object_columns )
	if (object_columns.class != Array)
		error "Object contains no columns."
		return false
	elsif (given_columns.class == Hash)
		given_columns = given_columns.keys
	elsif (given_columns.class != Array)
		error "No columns specified."
		return false
	end
	unknown_column = false
	given_columns.each do |column_name|
		if (! object_columns.include? column_name)
			error "Column \"#{column_name}\" not found."
			unknown_column = true
		end
	end
	if (unknown_column)
		return false
	end
	return true
end

# define allowed attributes
def allowed_attributes( class_object )
	attributes = {
		'User' => [
			'id', 'username', 'sn', 'gn', 'email', 'password', 'role',
		]
	}
	
	class_name = class_object.name
	
	if (attributes.include? class_name)
		return attributes[class_name]
	end
	class_attributes = ['id'].concat(class_object.new.attributes.keys)
	class_attributes.delete('created_at')
	class_attributes.delete('updated_at')
	return class_attributes
end

# define default column order for frequently used models
def default_column_order( object_name, columns )
	default_columns = {
		'User' => [
			'id', 'username', 'sn', 'gn', 'email', 'role',
		]
	}
	
	if (default_columns.include? object_name)
		return default_columns[object_name]
	end
	columns.delete('created_at')
	columns.delete('updated_at')
	return columns
end


def get_terminal_width( default = nil )
	cols = nil
	
	c = ENV['COLUMNS'].to_s.strip.to_i
	cols = c if c > 0
	
	if cols == nil
		begin
			c = `tput cols`.strip.to_i
			cols = c if c > 0
		rescue
		end
	end
	
	cols = default if cols == nil
	return cols
end


APP_PATH = File.expand_path('../../config/application',  __FILE__)
require File.expand_path('../../config/boot',  __FILE__)
require APP_PATH

Rails.application.require_environment!
$stderr.print "(Rails environment: #{Rails.env})\n"



def get_subclasses_of( superclasses )
	subclasses = []
	superclasses.each do |superclass|
		ObjectSpace.each_object( class << superclass; self; end ) do |obj|
			if obj != superclass && (obj.name.blank? || eval("defined?(::#{obj}) && ::#{obj}.object_id == obj.object_id"))
				subclasses << obj
			end
		end
	end
	subclasses.sort! { |a,b| a.to_s <=> b.to_s }
	return subclasses
end

def load_rails_models
	Dir.glob( Rails.root.to_s + '/app/models/*.rb').each { |file|
		#require File.expand_path(file)
		#ActiveSupport::Dependencies.load_file( file )
		ActiveSupport::Dependencies.require_or_load( file )
	}
end

def get_rails_models
	load_rails_models
	models = get_subclasses_of([ ActiveRecord::Base ])
	models.reject! { |m| m.respond_to?( :'abstract_class?' ) && m.abstract_class? }
	return models
end

def str_wrap( s, width=72 )
	return s.gsub( /(.{1,#{width}})(\s+|\Z)/, "\\1\n" )
end



terminal_width = get_terminal_width( 72 )

usage_banner = <<-HEREDOC
Usage: #{$0} action [resource] [options]
  action:  "list"      : List entries.
           "add"       : Add an entry.
           "update"    : Update an entry.
           "delete"    : Delete an entry.
           "resources" : List available resources.
  resource:  Name of the resource model.
             (e.g. "SipAccount" / "sip_account")
             Plural forms are singularized automatically.
HEREDOC

options = {
	:column_separator => ' | ',
}
columns = {}
require 'optparse'
optionparser = OptionParser.new do |opts|
	opts.banner = usage_banner
	opts.separator "  "
	opts.separator "  options:"
	opts.on( '-c <column1,column2,column3>', Array, "Specify column order." ) { |value|
		options[:column_order] = value
	}
	opts.on( '-s <separator>', String, "Specify column separator.", "Default: \"#{ options[:column_separator] }\"" ) { |value|
		options[:column_separator] = value
	}
	opts.on( '-h', "Display this help screen." ) {
		puts optionparser
		exit 0
	}
	opts.separator "  "
	opts.separator "  In addition to the standard options there are resource-specific ones."
	opts.separator "  Find them with the -h option e.g. `#{$0} list MyResource -h`."
end

# first parameter ist always the action
if (! ARGV[0])
	error "No action specified."
	error optionparser
	exit 1
end
action_name = ARGV[0].downcase

I18n.locale = :'en-US'

if (action_name != 'resources')
	# second parameter is the model name
	if (! ARGV[1])
		error "No resource specified."
		error optionparser
		exit 1
	end
	model_class = ARGV[1]
	begin
		model_class = model_class.singularize.camelize
		model_class = model_class.constantize  # This is where errors can happen.
	rescue
		error "Resource \"#{model_class}\" not found."
		error optionparser
		exit 1
	end

	# retrieve attribute names from model
	begin
		attribute_names = allowed_attributes( model_class )
		column_order =  default_column_order( model_class.name, model_class.column_names )
	rescue ActiveRecord::StatementInvalid => e
		error "Model \"#{model_class}\" does not have a database table."
		error optionparser
		exit 1
	end

	optionparser.separator "  Resource-specific options (find by / set attribute):"
	optionparser.on( '--id <value>', "Numeric ID", 'Used as key on update/delete operations.') { |value|
		columns['id'] = value
	}
	attribute_names.each { |attr_name|
		if (attr_name == 'id')
			next
		end
		optionparser.on( "--#{attr_name} <value>",
				String, I18n.t("activerecord.attributes.#{model_class.name.underscore}.#{attr_name}"),
				String, I18n.t("simple_form.hints.#{model_class.name.underscore}.#{attr_name}")
			) { |value|
			columns[attr_name] = value
		}
	}
end

optionparser.separator ""

# parse options
begin 
	optionparser.parse! ARGV
rescue OptionParser::InvalidOption => e
	error e
	error optionparser
	#error usage_banner
	exit 1
rescue OptionParser::NeedlessArgument => e
	error e
	error optionparser
	#error usage_banner
	exit 1
end

# ensure given options represent model attributes
if (options[:column_order])    
    if (! check_columns( options[:column_order], attribute_names ))
		error "Some columns not found."
		exit 1
	else
		column_order = options[:column_order]
	end
end

if (columns.count > 0 && ! check_columns( columns, attribute_names ))
	error "Some columns not found."
	exit 1
end



# process comand
case action_name
when 'resources'
	models = get_rails_models
	if (models)
		model_name_length_max = 0
		models.each do |model|
			model_name_length = model.to_s.length
			if (model_name_length > model_name_length_max)
				model_name_length_max = model_name_length
			end
		end
		
		models.each do |model|
			model_name = model.to_s
			model_description = I18n.t("activerecord.models.#{model_name.underscore}")
			indent=0			
			puts str_wrap("#{model_name} #{(" " * (model_name_length_max - model_name.length))} #{model_description}" , [(terminal_width-indent-1), 30].max ).split("\n").map{ |x| (" " * indent) + x.to_s }.join("\n")
		end
	end
when 'list'
	begin
		if (columns.count > 0)
			entries = model_class.where(columns).all
		else
			entries = model_class.all
		end
	rescue => e
		error "Could not find objects."
		exit 1
	end
	if (entries)
		separator = ("-" * (terminal_width - 2))
		$stderr.puts separator
		$stderr.puts column_order.join( options[:column_separator] )
		$stderr.puts separator
		entries.each { |entry|
			values = Array.new()
			column_order.each { |column|
				values << entry[column]
			}
			puts values.join( options[:column_separator] )
		}
		$stderr.puts separator
	end
when 'add'
	new_object = model_class.create(columns)
	if (new_object)
		if (new_object.save)
			puts "Object \"#{model_class.name}\" added."
		else
			validation_error new_object.errors
			error "Object \"#{model_class.name}\" could not be added."
			exit 1
		end
	else
		error "Object \"#{model_class.name}\" not added."
		exit 1
	end
when 'update'
	if (columns['id'].blank?)
		error "No object ID specified."
		puts columns
		exit 1
	end
	object_found = model_class.where(:id  => columns['id']).first
	if (object_found)
		object_updated = object_found.update_attributes(columns)
	else
		error "No object ID \"#{columns.id}\" found."
		exit 1
	end
	
	if (object_updated)
		puts "Object \"#{model_class.name}\" updated."
	else
		error "Object \"#{model_class.name}\" not updated."
		exit 1
	end
when 'delete'
	if (columns['id'].blank?)
		error "No object ID specified."
		exit 1
	end
	object_found = model_class.where(:id  => columns['id']).first
	if (object_found)
		object_deleted = object_found.delete
	else
		error "No object ID \"#{columns.id}\" found."
		exit 1
	end
	if (object_deleted)
		puts "Object \"#{model_class.name}\" deleted."
	else
		error "Object \"#{model_class.name}\" not deleted."
		exit 1
	end
else
	error "Invalid action \"#{action_name}\"."
	error optionparser
	exit 1
end


rescue SignalException => e
	$stderr.print "#{e.class.to_s}"
	$stderr.print " (Signal #{e.signo.to_s})" if e.respond_to?(:signo) && e.signo
	$stderr.puts ""
	exit 130
end

exit 0  # suppress the useless stuff in following that would otherwise be printed (from minitest?):
=begin
Loaded suite ./script/gs4cmd
Started

Finished in 0.002... seconds.

0 tests, 0 assertions, 0 failures, 0 errors, 0 skips

Test run options: --seed ...
=end


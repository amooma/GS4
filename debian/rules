#!/usr/bin/make -f
# -*- makefile -*-
# Sample debian/rules that uses debhelper.
#
# This file was originally written by Joey Hess and Craig Small.
# As a special exception, when this file is copied by dh-make into a
# dh-make output file, you may use that output file without restriction.
# This special exception was added by Craig Small in version 0.37 of dh-make.
#
# Modified to make a template file for a multi-binary package with separated
# build-arch and build-indep targets  by Bill Allombert 2001

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# This has to be exported to make some magic below work.
export DH_OPTIONS



DEB_VERSION:=$(shell dpkg-parsechangelog | sed -n -e 's/Version: //p')
#DEB_NOEPOCH_VERSION:=$(shell echo $(DEB_VERSION) | cut -d':' -f 2)
#DEB_SRC_VERSION:=$(shell echo $(DEB_NOEPOCH_VERSION) | sed -e 's/-[^-]\+$$//')


PACKAGE = $(firstword $(shell dh_listpackages))
#PACKAGE="gemeinschaft"
TMP     = $(CURDIR)/debian/$(PACKAGE)
# http://pkg-perl.alioth.debian.org/debhelper.html

XARGS_0_RM=xargs -0 -n 1 --no-run-if-empty 'rm'


print-version:
	@@echo "Main package:      $(PACKAGE)"
	@@echo "Debian version:    $(DEB_VERSION)"
	@@echo "Debian version:    $(DEB_NOEPOCH_VERSION)"
	@@echo "Debian version:    $(DEB_SRC_VERSION)"


_have-clean-working-dir:
	@ if [ ! -f ".build_unclean" ]; then \
		if [ -d ".git" ]; then \
			if ! git status | grep -q 'nothing to commit (working directory clean)'; then \
				( \
				echo "##############################################################" ;\
				echo "#  Git working directory should be clean. (git status)" ;\
				echo "#  If you really want to build a package from an unclean" ;\
				echo "#  working copy then \"touch .build_unclean\" and try again." ;\
				echo "##############################################################" ;\
				) >&2 ;\
				exit 1 ;\
			fi ;\
		fi ;\
	else \
		( \
		echo "##############################################################" ;\
		echo "#  Building from an unclean working copy ..." ;\
		echo "##############################################################" ;\
		) >&2 ;\
	fi


override_dh_auto_clean:
	@ #dh_auto_clean  # calls `make clean` (which removes the Debian packages)


override_dh_clean:
	dh_clean
	[ ! -f "$(TMP)/ERD.pdf" ] || rm "$(TMP)/ERD.pdf"
	@ # [ ! -d "vendor/bundle" ] || rm -rf "vendor/bundle"


override_dh_auto_build:
	@ #dh_auto_build  # calls `make`
	
	# Package Gems into vendor/bundle/:
	#
	@ if [ ! -f "Gemfile.lock" ]; then \
		( \
		echo "##############################################################" ;\
		echo "#  Gemfile.lock not found. It should be in your VCS." ;\
		echo "##############################################################" ;\
		) >&2 ;\
		exit 1 ;\
	fi
	@ if ! bundle check; then \
		( \
		echo "##############################################################" ;\
		echo "#  Did not find required Gems." ;\
		echo "#  Please run \"bundle install\"." ;\
		echo "##############################################################" ;\
		) >&2 ;\
		exit 1 ;\
	fi
	@ # Unfortunately "bundle package" (or "bundle install") downloads
	@ # the Gems and compiles them in one step. "build" target must
	@ # never download anything though.
	
	# Install Gems into vendor/bundle/ (for gemeinschaft-ruby-gems):
	#FIXME TODO Remove vendor/bundle when done, but not in a "clean"
	# target.
	bundle install --deployment --local
	
	# Install Gems into vendor/cache/ (for gemeinschaft-ruby-gems-native-target-compile):
	bundle package
	
	bundle check


override_dh_auto_install:
	@ #dh_auto_install  # calls `make install`
	
	# Remove stuff that we don't want in the package (and which
	# shouldn't be in the VCS):
	find "$(TMP)"     -type f -name '.DS_Store' -print0 | $(XARGS_0_RM)
	find "$(TMP)/log" -type f -name '*.log'     -print0 | $(XARGS_0_RM)
	
	# Check that there aren't any local modifications:
	./debian/rules _have-clean-working-dir
	
	# Remove more stuff that we don't want in the package (which
	# may be in the VCS):
	find "$(TMP)" -type f -name '.git*' -print0 | $(XARGS_0_RM)
	find "$(TMP)" -type d -name '.git'  -print0 | $(XARGS_0_RM)
	


%:
	dh $@ 

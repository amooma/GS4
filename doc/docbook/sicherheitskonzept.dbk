<?xml version="1.0" encoding="UTF-8"?>
<article version="5.0" xml:id="sicherheitskonzept" xml:lang="de"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Sicherheitskonzept</title>

  <info>
    <authorgroup>
      <author>
        <orgname>Amooma GmbH</orgname>

        <uri><link
        xlink:href="http://www.amooma.de/">http://www.amooma.de</link></uri>
      </author>
    </authorgroup>
  </info>

  <para>In <xref linkend="beschreibung" /> finden Sie eine Übersicht über die
  grundlegende Funktionsweise von Gemeinschaft4. Um ein sicheres System zu
  bieten gehen wir von folgende Ansätze aus:<itemizedlist>
      <listitem>
        <para>Minimales System. Auf dem System sind nur die wirklich
        benötigten Pakete installiert, denn jegliche zusätzliche Software
        birgt auch potenzielle Fehler und kann u.U. einem Eindringling
        hilfreich sein, beispielsweise Compiler auf dem System.</para>
      </listitem>

      <listitem>
        <para>Verschlüsseltes Dateisystem. Gemeinschaft4 kann auf einem
        normalen Debian Linux installiert werden, die Standard-Variante ist
        jedoch ein unveränderbares Live-CD-System das sensible Daten auf einem
        verschlüsselten Dateisystem auf einem USB-Stick oder einer Festplatte
        speichert.</para>
      </listitem>

      <listitem>
        <para>Firewall. Es muß damit gerechnet werden daß ein Administrator
        die TK-Anlage im Extremfall direkt ins Internet hängt, daher muß die
        Anlage entsprechend abgesichert sein und eine eigene Firewall
        mitbringen. Zur Verwaltung der IPTables-Regeln kommt Shorewall zum
        Einsatz. Damit werden nur die wirklich benötigten Ports und Protokolle
        freigegeben.</para>
      </listitem>

      <listitem>
        <para>In der Standard-Installation sind keine Dienste enthalten nur
        weil sie praktisch sind. Wenn der Administrator SSH benötigt so muß er
        sich bewußt dafür entscheiden.</para>
      </listitem>
    </itemizedlist></para>

  <para>Nachfolgend geben wir einen Überblick über das
  Sicherheitskonzept.</para>

  <section xml:id="sicherheitskonzept-komplettsystem">
    <title>Komplettsystem</title>

    <para>Die Sicherheit des Komplettssystems ist von der Sicherheit aller
    Komponenten im Zusammenspiel abhängig. Eine einzelne Absicherung alleine
    garantiert noch keine Sicherheit des gesamten Systems.</para>

    <para>Um ein Beispiel zu geben: Es ist zwar gut wenn bei API-Zugriffen
    eine Authentifizierung und Authorisierung stattfindet, würde allerdings
    umgangen wenn das System als Beispiel gleichzeitig einen offenen
    SSH-Dienst für den root-Benutzer mit einem zu einfachen Paßwort wie „123“
    hätte.</para>

    <para>Die Kombination aller Faktoren ist also entscheidend, denn
    potenziell untergräbt das schwächste Glied in der Kette eben auch andere
    Schutzmechanismen.</para>

    <para>Hier spielen auch Faktoren hinein die außerhalb der Kontrolle der
    Telefonanlagen-Software liegen, d.h. bezogen sind auf z.B. die Hardware
    oder auf menschliche Einflüsse.</para>

    <para>Wie in der Vergangenheit immer wieder erschreckende Fälle zeigen:
    Die beste Firewall kann umgangen werden wenn man den Administrator per
    „<foreignphrase xml:lang="en">Social Engineering</foreignphrase>“ dazu
    bringt „mal eben schnell“ einen SSH-Zugang freizugeben.</para>

    <para>Oder: Die Software loggt beispielsweise auf einen separaten
    Syslog-Server aber der Administrator übersieht daß dort die Festplatte
    defekt ist.</para>

    <para>Oder: Die Software schreibt zwar ein Backup, das dann aber durch
    einen menschlichen Fehler zerstört wird.</para>

    <para>Oder: Die Software verlangt zwar ein extrem langes Paßwort, aber am
    Tastaturkabel hat jemand einen Key-Logger angebracht.</para>

    <para>Oder: Es gibt zwar einen Backup-Server, aber im Ernstfall stellt
    sich heraus daß jemand der keinen Zugang zum Rechner-Raum haben sollte
    diesen Server in Unachtsamkeit zweckentfremdet hat.</para>

    <para>Es ist auch zu beachten daß viele Maßnahmen für sich alleine
    genommen keine absolute Sicherheit garantieren sondern lediglich eine
    zusätzliche Hürde bilden. Beispielsweise ist ein SSH-Dienst auf Port 22
    ebenso sicher bzw. unsicher wie ein ansonsten in gleicher Weise
    geschützten SSH-Dienst auf einem anderen höheren Port. Wenn der Dienst
    allerdings auf einem anderen Port läuft wird er weniger leicht von
    Scannern entdeckt. Somit würden zumindest eine Menge „Script Kiddies“
    abgehalten. Ähnliches gilt für Zugriffsbeschränkungen anhand von IP- oder
    MAC-Adressen. Man darf sich auf keine dieser Maßnahmen als alleinige
    Zugangskontrolle verlassen, aber dennoch können sie dazu beitragen die
    Hürde zu erhöhen.</para>

    <para>Für kryptographische Algorithmen gilt: Wer kein Experte auf dem
    Gebiet der Kryptologie ist sollte auf zuverlässige, anerkannte und
    getestete Verfahren zurückgreifen statt „mal eben schnell“ was eigenes zu
    erfinden. Beispielsweise ist die mehrfache Anwendung eines Algorithmus
    oder die Kombination aus zwei Algorithmen nicht unbedingt besser &#8211;
    manchmal sogar deutlich leichter angreifbar. Extremes (vereinfachtes)
    Beispiel: Die doppelte Anwendung von Rot-13 führt nicht zu doppelt guter
    Verschlüsselung. :-)</para>
  </section>

  <section xml:id="sicherheitskonzept-betriebssystem">
    <title>Betriebssystem</title>

    <para>Die Grundlage bildet ein gehärtetes Betriebssystem, auf dem die
    Telefonanlage letztlich installiert wird. Eine dedizierte Beschreibung
    dazu findet sich bei der Build-Umgebung des gehärteten Systems. Trotzdem
    wollen wir hier einige Punkte nennen:</para>

    <itemizedlist>
      <listitem>
        <para>keine nicht benötigte Dienste und Softwarekomponenten
        installieren, bzw. diese entfernen</para>
      </listitem>

      <listitem>
        <para>keine Paßwörter im Klartext übertragen oder speichern</para>
      </listitem>

      <listitem>
        <para>restriktive Sicherheitsrichtlinien bzw Rechte für Prozesse und
        Benutzer (SELinux z.B.)</para>
      </listitem>

      <listitem>
        <para>restriktiv konfigurierte Paketfilter (IPTables)</para>
      </listitem>

      <listitem>
        <para>Einsatz eines host-basierten Intrusion-Detection-Systems (IDS)
        bzw. Intrusion-Prevention-Systems (IPS) wie Snort</para>
      </listitem>

      <listitem>
        <para>Protokollierung von Verbindungs- und
        Authentifizierungsversuchen</para>
      </listitem>

      <listitem>
        <para>schutzwürdige Daten auf einem verschlüsselten Dateisystem
        speichern</para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="sicherheitskonzept-voip">
    <title>VoIP</title>

    <para>Wichtige Bausteine des Sicherheitskonzeptes auf der
    VoIP-Ebene:</para>

    <itemizedlist>
      <listitem>
        <bridgehead>SIP-Proxy</bridgehead>

        <para>SIP-Proxy Kamailio als <quote>erste Verteidigungslinie</quote>
        der Telefonanlage auf SIP-Ebene. Dadurch können beispielsweise
        Protokoll-Format-Verletzungen zustandslos und damit performant
        abgefangen werden, ohne dass diese zum SIP-B2BUA durchdringen. Dadurch
        wird das Risiko bzw. die Auswirkung von Denial-of-Service-Angriffen
        (DoS) verringert.</para>
      </listitem>

      <listitem>
        <bridgehead>SIP-SBC-Funktionalität</bridgehead>

        <para>Durch die Kombination aus Kamailio und FreeSwitch bringt die
        Telefonanlage direkt Funktionen mit die typischerweise ein Session
        Border Controller übernimmt. Dadurch kann selbst ein vergleichsweise
        unerfahrener Administrator die Telefonanlage betreiben, denn diese ist
        auch vor Angriffen von innen <quote>ab Werk</quote> gut
        geschützt.</para>

        <para>Es steht dem Administrator jedoch frei zusätzlich einen Session
        Border Controller an der Netzwerk-Grenze zu installieren. Dies kann
        &#8211; je nach Installation &#8211; beispielsweise ratsam sein um die
        eigene Netzwerk-Topologie vor externen VoIP-Kommunikationsteilnehmern
        zusätzlich zu verbergen, führt allerdings zu einer geringfügig höheren
        Latenz.</para>

        <para>Grundsätzlich muß bei der Entwicklung damit gerechnet werden daß
        die Telefonanlage ohne zusätzlichen Schutz ein Netzwerk-Interface ins
        Internet haben könnte, daher muß sie in der Standard-Installation u.a.
        eine eigene Firewall mitbringen.</para>
      </listitem>

      <listitem>
        <bridgehead>Verschlüsselung</bridgehead>

        <para>Die Signalisierung der Gespräche erfolgt TLS-verschlüsselt.
        Hierdurch wird sichergestellt, dass keine unbefugten Personen die
        Daten des Gesprächsaufbaus (Nummer des Anrufers, Nummer des
        Angerufenen etc.) abfangen können. Da während des Gesprächs
        übertragene DTMF-Töne auch über SIP übertragen werden können, ist die
        Verschlüsselung der Signalisierung extrem wichtig (Beispiel:
        Onlinebanking mit PIN per DTMF).</para>

        <para>Bei allen Gesprächen soll der RTP-Strom verschlüsselt sein. Dazu
        gehört auch die Identifizierung der Teilnehmer. Eine zuverlässige
        Identifizierung der Teilnehmer kann nur über auf den Endgeräten
        installierte Client-Zertifikate sichergestellt werden. Die Verteilung
        dieser Zertifikate sollte über ein gesichertes Netz bei der
        Ersteinrichtung stattfinden (ideal: Netzwerkkarte direkt am Server mit
        Kabel zum Telefon).</para>

        <para>Eine durchgehende Ende-zu-Ende-Verschlüsselung kann mit den
        heutigen technischen Mitteln gut durch ZRTP sichergestellt werden. Die
        eingesetzte Software (FreeSwitch) unterstützt bereits ZRTP. Um ZRTP
        nutzen zu können, müssen auch die verwendeten Endgeräte dieses
        Protokoll unterstützen. Andere Methoden haben momentan noch Schwächen.
        (Beispiel: Die Schlüssel müssen auf allen Servern über die der
        RTP-Strom geroutet wird vorhanden sein). ZRTP ist ein Verfahren zum
        Schlüsselaustausch über RTP. Darüber wird zwischen den Teilnehmern ein
        sogenanntes „<foreignphrase xml:lang="en">Shared
        Secret</foreignphrase>“ ausgehandelt, das dann zur Verschlüsselung der
        SRTP-Verbindung benutzt wird. Der Vorteil von ZRTP liegt darin daß es
        ohne eine <foreignphrase xml:lang="en">Public Key
        Infrastructure</foreignphrase> (PKI) auskommt.<footnote>
            <simpara>siehe auch:</simpara>

            <simpara><link
            xlink:href="http://zfoneproject.com/zrtp_ietf.html">http://zfoneproject.com/zrtp_ietf.html</link></simpara>

            <simpara><link
            xlink:href="http://zfoneproject.com/faq.html">http://zfoneproject.com/faq.html</link></simpara>
          </footnote></para>
      </listitem>
    </itemizedlist>
  </section>

  <section xml:id="sicherheitskonzept-web-interface">
    <title>Web-Interface</title>

    <para>Wichtige Bausteine des Sicherheitskonzeptes beim Web-Interface und
    der Applikation sind:</para>

    <itemizedlist>
      <listitem>
        <bridgehead>Validierungen</bridgehead>

        <para>Validierungen der Attribute in den sogenannten
        <quote><foreignphrase xml:lang="en">Models</foreignphrase></quote> der
        MVC-Architektur. So werden nur gültige Werte zugelassen. Bei Zugriff
        über das HTML-Web-Interface sowie über die XML-API finden die gleichen
        Validierungen statt. Dies ist ein Baustein der Maxime „Security by
        Design“, d.h. es wird immer von absichtlichen oder unabsichtlichen
        Falsch-Eingaben ausgegangen.</para>
      </listitem>

      <listitem>
        <bridgehead>Tests</bridgehead>

        <para>Wir verwenden eine stetig wachsende Anzahl an automatischen
        Unit-Tests, die einzelne Komponenten testen, sowie Funktionstests, die
        die ordnungsgemäße Funktion der Controller testen. Dadurch ist auch
        das Einloggen am System mit eingeschlossen. Hier ein Beispiel als
        Auszug:<programlisting># Ein Admin darf eine Liste der SIP-Telefone anzeigen:
#
test "should get index" do
    sign_in :user, @admin_user
    get :index
    assert_response :success
    assert_not_nil( assigns( :sip_phones))
    sign_out @admin_user
end

# ansonsten darf keine Anzeige erfolgen:
#
test "should not get index (not an admin)" do
    get :index
    assert_response( @expected_http_status_if_not_allowed )
end</programlisting></para>
      </listitem>

      <listitem>
        <bridgehead>Authentifizierung</bridgehead>

        <para>Zur Authentifizierung der Benutzer kommt <quote><foreignphrase
        xml:lang="en">Devise</foreignphrase></quote> zum Einsatz (<link
        xlink:href="https://github.com/plataformatec/devise">https://github.com/plataformatec/devise</link>).
        Bei der Auswahl eines geeigneten Authentifizierungssystems für Ruby on
        Rails war uns wichtig ein populäres System zu wählen das sich in
        vielfachem produktivem Einsatz bewährt hat, das gut durch
        automatisierte Tests abgedeckt ist, das aktiv gepflegt wird und das
        bereits vielen Entwicklern bekannt ist. Devise ist ein modulares
        System bei dem man nur die Komponenten einbindet die von der
        jeweiligen Applikation genutzt werden. Zu den Modulen gehört
        beispielsweise <quote><foreignphrase xml:lang="en">Database
        Authenticatable</foreignphrase></quote>, das das Einloggen der
        Benutzer per Benutzername und Paßwort übernimmt. Die Paßwörter sind
        dabei in der Datenbank nicht im Klartext gespeichert sondern als
        SHA-Hashes (<link
        xlink:href="http://de.wikipedia.org/wiki/Secure_Hash_Algorithm">http://de.wikipedia.org/wiki/Secure_Hash_Algorithm</link>)
        die über Paßwort und ein zufälliges <quote><foreignphrase
        xml:lang="en">Salt</foreignphrase></quote> (<link
        xlink:href="http://de.wikipedia.org/wiki/Salt_%28Kryptologie%29">http://de.wikipedia.org/wiki/Salt_(Kryptologie)</link>)
        gebildet werden. Auf diese Weise kann selbst jemand mit Zugriff auf
        die Datenbank die Paßwörter nicht rekonstruieren, und durch das
        <quote><foreignphrase xml:lang="en">Salt</foreignphrase></quote> wird
        der Angriff mit <quote><foreignphrase xml:lang="en">Rainbow
        Tables</foreignphrase></quote> erschwert.</para>
      </listitem>

      <listitem>
        <bridgehead>ORM</bridgehead>

        <para>Kein SQL im Code. Durch die Verwendung eines Objekt-relationalen
        Mappers (ActiveRecord) besteht nicht die Gefahr daß durch Fehler im
        Code von Gemeinschaft4 Daten ohne Escaping in SQL-Statements landen,
        dadurch wird SQL-Injection verhindert. ActiveRecord selbst ist sehr
        gut getestet und tausendfach im Einsatz.</para>

        <para>Ebenso kommen Datenbank-Transaktionen zum Einsatz, also die
        Zusammenfassung von logisch zusammengehörigen Einzel-Operationen. Dies
        dient der Daten-Integrität durch Atomarität (<foreignphrase
        xml:lang="en">Atomicity</foreignphrase>), Konsistenz (<foreignphrase
        xml:lang="en">Consistency</foreignphrase>), Isolation (<foreignphrase
        xml:lang="en">Isolation</foreignphrase>) und Dauerhaftigkeit
        (<foreignphrase xml:lang="en">Durability</foreignphrase>).</para>
      </listitem>

      <listitem>
        <bridgehead>Saubere Schnittstellen</bridgehead>

        <para>Gemeinschaft4 verwendet durch die
        Model-View-Controller-Architektur definierte Schnittstellen.
        Gleichzeitig werden nach außen APIs im REST-Stil bereitgestellt.
        Ebenso wie für das HTML-Interface ist zur Benutzung der Schnittstellen
        eine Authentifizierung und Authorisierung erforderlich. So können
        weitere Konfigurations-Tools oder beispielsweise eine andere
        Applikation auf die Schnittstellen zugreifen ohne daß die Gefahr
        besteht, daß sich potenzielle Fehler in solchen „externen“ Tools auf
        den Kern des Systems auswirken oder daß &#8211; möglicherweise
        unbeabsichtigt &#8211; Zugriffsbeschränkungen umgangen werden.</para>
      </listitem>

      <listitem>
        <bridgehead>HTTPS</bridgehead>

        <para>Verbindungen sollen immer über HTTPS erfolgen. Dabei ist zu
        beachten nur geeignete Cipher Suites auszuwählen, also geeignete
        Varianten aus der großen Menge der möglichen Verfahren beim
        Schlüsselaustausch, Authentifizierung, Hashfunktion und
        Verschlüsselung. Insbesondere bietet die sogenannte
        „Null“-Verschlüsselung, die prinzipiell von SSL/TLS unterstützt wird,
        keine Verschlüsselung &#8211; wie der Name schon sagt. Schlüssel unter
        einer Länge von 128 Bit sollen generell ausgeschlossen werden, ebenso
        wie die Hash-Algorithmen MD5 und SHA-1 (stattdessen: SHA-2-Familie).
        Natürlich dürfen nur solche Zertifikate akzeptiert werden, deren
        „<foreignphrase xml:lang="en">Chain</foreignphrase>“ (Kette) zur CA
        (<foreignphrase xml:lang="en">Certificate Authority</foreignphrase>)
        korrekt ist.</para>

        <para>Besonders schützenswerte Bereiche können zusätzlich durch
        Client-Zertifikate abgesichert werden. Der Zugriff auf so geschützte
        Bereiche ist dann nur mit einem im Browser installierten Zertifikat
        möglich. Wenn die Zertifikate auf einem gesicherten Weg verteilt
        wurden kann damit sichergestellt werden dass keine sensiblen Daten
        durch einen einfachen Passwortdiebstahl zugänglich sind.</para>
      </listitem>
    </itemizedlist>
  </section>
</article>
